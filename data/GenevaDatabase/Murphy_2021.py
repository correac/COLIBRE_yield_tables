import numpy as np
import h5py
from scipy import interpolate
from pylab import *
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit

def func(x, a, b):
    return a + b * x

# Plot parameters
params = {
    "font.size": 11,
    "font.family":"Times",
    "text.usetex": True,
    "figure.figsize": (4, 3),
    "figure.subplot.left": 0.17,
    "figure.subplot.right": 0.95,
    "figure.subplot.bottom": 0.15,
    "figure.subplot.top": 0.95,
    "figure.subplot.wspace": 0.25,
    "figure.subplot.hspace": 0.25,
    "lines.markersize": 3,
    "lines.linewidth": 1,
    "figure.max_open_warning": 0,
}
rcParams.update(params)

# def plot_Fishlock(index):
#     # Write data to HDF5
#     with h5py.File('../Fishlock2014/AGB_Fishlock2014.hdf5', 'r') as data_file:
#         Masses = data_file["Masses"][:]
#         Y_Z0007 = data_file["/Yields/Z_0.001/Yield"][:][:]
#
#     plt.plot(Masses, Y_Z0007[index, :], '-o', color='tab:green', label='Fishlock+, Z=0.001')
#
#
# def plot_karakas(index):
#     # Write data to HDF5
#     with h5py.File('../AGB.hdf5', 'r') as data_file:
#         Masses = data_file["Masses"][:]
#         Y_Z0007 = data_file["/Yields/Z_0.007/Yield"][:][:]
#         Y_Z0014 = data_file["/Yields/Z_0.014/Yield"][:][:]
#         Y_Z0030 = data_file["/Yields/Z_0.03/Yield"][:][:]
#
#     plt.plot(Masses, Y_Z0007[index, :], '-o', color='tab:blue',label='Karakas+, Z=0.007')
#     plt.plot(Masses, Y_Z0014[index, :], '-o', color='crimson',label='Karakas+, Z=0.014')
#     plt.plot(Masses, Y_Z0030[index, :], '-o', color='grey',label='Karakas+, Z=0.03')

class make_yield_tables:

    def __init__(self):

        # Table details, let's specify metallicity and mass bins :
        self.Z_bins = np.array([0.0])
        self.num_Z_bins = 1

        self.mass_bins = np.array([9, 12, 15, 20, 30, 40, 60, 85, 120])
        self.num_mass_bins = None
        self.Z0_mass_ejected = None
        self.Z0_total_metals = None

        # Total mass of Nitrogen 14, Carbon 12 and Oxygen 16 produced [Msun]. Table 2, Murphy et al.
        # here we assume no stellar rotation
        self.Nitrogen_yield = np.array([
            2.25e-8, 1.21e-7, 1.75e-7, 1.39e-3, 3.54e-7, 1.91e-7, 1.16e-4, 4.63e-5, 1.38e-5])
        self.Carbon_yield = np.array([
            9.51e-2, 0.6096, 0.8802, 0.6441, 3.2524, 2.1055, 3.043, 9.8349, 4.8774])
        self.Oxygen_yield = np.array([
            2.07e-2, 0.6547, 1.3822, 1.6452, 8.8982, 7.8767, 15.697, 47.1081, 40.9261])

        # # here we assume stellar rotation
        # self.Nitrogen_yield = np.array([
        #     2.13e-3, 8e-3, 0.0123, 4.94e-7, 1.4e-6, 2.74e-6, 1.08e-5, 1.73e-5, 1.42e-3])
        # self.Carbon_yield = np.array([
        #     0.2326, 0.3127, 0.4366, 1.2338, 0.8876, 2.3408, 5.6166, 10.9537, 28.3493])
        # self.Oxygen_yield = np.array([
        #     0.2793, 0.9704, 0.6262, 4.1089, 3.6803, 4.878, 27.2175, 41.6622, 65.812])

    def extrapolate_low_mass(self):

        self.new_mass_range = np.arange(1, 9, 1)
        mass_range = self.mass_bins
        xdata = np.log10(mass_range)
        for i in range(3):

            if i == 0:
                ydata = np.log10(self.Nitrogen_yield)
            if i == 1:
                ydata = np.log10(self.Carbon_yield)
            if i == 2:
                ydata = np.log10(self.Oxygen_yield)

            popt, pcov = curve_fit(func, xdata, ydata)

            if i == 0:
                self.new_Nitrogen_range = 10**func(np.log10(self.new_mass_range), *popt)
            if i == 1:
                self.new_Carbon_range = 10**func(np.log10(self.new_mass_range), *popt)
            if i == 2:
                self.new_Oxygen_range = 10**func(np.log10(self.new_mass_range), *popt)

        self.mass_bins = np.concatenate((self.new_mass_range, self.mass_bins))
        self.num_mass_bins = len(self.mass_bins)
        self.Nitrogen_yield = np.concatenate((self.new_Nitrogen_range, self.Nitrogen_yield))
        self.Carbon_yield = np.concatenate((self.new_Carbon_range, self.Carbon_yield))
        self.Oxygen_yield = np.concatenate((self.new_Oxygen_range, self.Oxygen_yield))


    def output_table(self):

        with h5py.File('./PopIII_Murphy2021.hdf5', 'w') as data_file:
            Header = data_file.create_group('Header')

            description = "Net yields for Population III stars (in units of solar mass) taken from Murphy et al. (2021). "
            description += "These yields were calculated for the initial mass range 9-120 Msun. The range of yields in the "
            description += "mass range 1-9 Msun correspond to extrapolation of the original yields."
            Header.attrs["Description"] = np.string_(description)

            contact = "Dataset generated by Camila Correa (CEA Paris-Saclay). Email: camila.correa@cea.fr,"
            contact += " website: camilacorrea.com"
            Header.attrs["Contact"] = np.string_(contact)

            data_masses = data_file.create_dataset('Masses', data=self.mass_bins)
            data_masses.attrs["Description"] = np.string_("Mass bins in units of Msolar")

            data_Z = data_file.create_dataset('Metallicities', data=self.Z_bins)
            data_Z.attrs["Description"] = np.string_("Metallicity bins")

            data_file.create_dataset('Number_of_metallicities', data=self.num_Z_bins)
            data_file.create_dataset('Number_of_masses', data=self.num_mass_bins)
            data_file.create_dataset('Number_of_species', data=np.array([3]))

            Z_names = ['Z_0.0']
            var = np.array(Z_names, dtype='S')
            dt = h5py.special_dtype(vlen=str)
            data_file.create_dataset('Yield_names', dtype=dt, data=var)

            Z_names = ['Carbon', 'Nitrogen', 'Oxygen']
            Element_names = np.string_(Z_names)
            dt = h5py.string_dtype(encoding='ascii')
            data_file.create_dataset('Species_names', dtype=dt, data=Element_names)

            Reference = np.string_(['Karakas, A., et al., 2010, MNRAS, 477, 1, 421'])
            data_file.create_dataset('Reference', data=Reference)

            Data = data_file.create_group('Yields')
            Z0 = Data.create_group('Z_0.0')
            Z0.create_dataset('Yield', data=self.Z0_yields)
            Z0.create_dataset('Ejected_mass', data=self.Z0_mass_ejected)
            Z0.create_dataset('Total_Metals', data=self.Z0_total_metals)


    def plot_tables(self):

        plt.figure()

        ax = plt.subplot(1, 1, 1)
        ax.grid(True)

        plt.plot(self.mass_bins, self.Oxygen_yield, '-o', color='tab:blue',label='Oxygen')
        plt.plot(self.mass_bins, self.Carbon_yield, '-o', color='tab:purple',label='Carbon')
        plt.plot(self.mass_bins, self.Nitrogen_yield, '-o', color='tab:orange',label='Nitrogen')

        # plt.plot(self.mass_bins, self.Oxygen_yield_rotation, '--', color='tab:blue')
        # plt.plot(self.mass_bins, self.Carbon_yield_rotation, '--', color='tab:purple')
        # plt.plot(self.mass_bins, self.Nitrogen_yield_rotation, '--', color='tab:orange')

        plt.xlabel('Initial stellar mass [M$_{\odot}$]')
        plt.ylabel('Yields [M$_{\odot}$]')
        plt.yscale('log')
        plt.xscale('log')
        # plt.axis([0.5, 150, 1e-10, 1e2])

        plt.legend(loc='lower right', labelspacing=0.2, handlelength=0.8,
                   handletextpad=0.3, frameon=False,
                   columnspacing=0.4, ncol=1, fontsize=7)
        ax.tick_params(direction='in', axis='both', which='both', pad=4.5)
        plt.savefig('./Murphy_popII.png', dpi=300)

if __name__ == "__main__":

    yields = make_yield_tables()
    yields.extrapolate_low_mass()
    yields.plot_tables()