import numpy as np
import h5py
from utils import interpolate_data

class make_yield_tables:

    def __init__(self):

        # Table details, let's specify metallicity and mass bins :
        self.Z_bins = np.array([0.0001, 0.004])
        self.num_Z_bins = len(self.Z_bins)

        self.species = np.array(
            [1, 2, 6, 7, 8, 10, 12, 14, 16, 20, 26, 38, 56])  # H, He, C, N, O, Ne, Mg, Si, S, Ca, Fe, Sr & Ba
        self.num_species = len(self.species)

        self.mass_bins = np.array(
            [1., 1.25, 1.5, 1.75, 2, 2.25, 2.5, 2.75, 3., 3.25, 3.5, 3.75, 4., 4.25, 4.5, 4.75, 5., 5.5, 6., 7., 8., 9.,
             10., 11., 12.])
        self.num_mass_bins = len(self.mass_bins)
        self.file_ending = np.array(['_z0001','_z004'])


    def read_data(self, z_index):

        species_list = np.array(['p','He','C','N','O','Ne','Mg','Si','S','Ca','Fe','g','g'])

        data = np.loadtxt("./data/Karakas2010/data.txt", comments='#', usecols=(0, 2, 3, 5, 6, 7, 8))
        species = np.loadtxt("./data/Karakas2010/data.txt", comments='#', usecols=(4), dtype='str')
        z_bins = np.where(data[:,1] == self.Z_bins[z_index])[0]
        data = data[z_bins,:]
        species = species[z_bins]

        yields = np.zeros((self.num_species, self.num_mass_bins))

        for i in range(0, self.num_species):

            sp = species_list[i]
            select_species = np.where(species==sp)[0]
            if len(select_species)==0:continue # Element not found

            # Here yields are net yields, defined as the total mass (of each element)
            # that is expelled to the ISM during the star lifetime: Xi x Mej
            # minus the initial abundance of the element in the star: (Xi - X0) x Mej
            data_yields_prev = data[select_species, 4]
            initial_mass, index = np.unique(data[select_species, 0], return_index=True)
            index = np.append(index,len(data[select_species, 0]))
            final_mass = np.unique(data[select_species, 2])
            mass_ejected = initial_mass - final_mass
            data_yields = np.zeros(len(initial_mass))
            for ii in range(len(data_yields)):data_yields[ii] = np.sum(data_yields_prev[index[ii]:index[ii+1]])

            #if (z_index == 0) & (i == 3): data_yields *= 1.5  # Boosting Nitrogen
            #if (z_index == 1) & (i == 3): data_yields *= 1.5  # Boosting Nitrogen

            yields[i, :] = interpolate_data(initial_mass, data_yields, self.mass_bins)
            if i==0: mass_ejected = interpolate_data(initial_mass, mass_ejected, self.mass_bins)

        return yields, mass_ejected

    def complete_for_s_process(self, yields, z_index):

        with h5py.File('./data/Karakas2016/AGB_Karakas2016.hdf5', 'r') as data_file:
            Y_Z007 = data_file["/Yields/Z_0.007/Yield"][:][:]
            Y_Z014 = data_file["/Yields/Z_0.014/Yield"][:][:]

        Zbins = np.array([0.007, 0.014])
        Sr_data_yields = np.zeros((len(self.mass_bins), 2))
        Ba_data_yields = np.zeros((len(self.mass_bins), 2))

        for j, m in enumerate(self.mass_bins):

            # Sr
            Sr_data_yields[:, 0] = Y_Z007[-2, :]
            Sr_data_yields[:, 1] = Y_Z014[-2, :]
            # Ba
            Ba_data_yields[:, 0] = Y_Z007[-1, :]
            Ba_data_yields[:, 1] = Y_Z014[-1, :]

            # Sr
            alpha = (np.log10(Sr_data_yields[j, 1]) - np.log10(Sr_data_yields[j, 0])) / (Zbins[1] - Zbins[0])
            beta = np.log10(Sr_data_yields[j, 1]) - alpha * Zbins[1]
            if z_index == 0:
                yields[-2, j] = 2 * 10**(alpha * 0.0001 + beta)
            else:
                yields[-2, j] = 2 * 10**(alpha * 0.004 + beta)

            # Ba
            alpha = (Ba_data_yields[j, 1] - Ba_data_yields[j, 0]) / (Zbins[1] - Zbins[0])
            beta = Ba_data_yields[j, 1] - alpha * Zbins[1]
            if z_index == 0:
                yields[-1, j] = alpha * 0.0001 + beta
            else:
                yields[-1, j] = alpha * 0.004 + beta

        return yields

def make_Karakas2010_table():

    Karakas_yields = make_yield_tables()

    with h5py.File('./data/Karakas2010/AGB_Karakas2010.hdf5', 'w') as data_file:
        Header = data_file.create_group('Header')

        description = "Net yields for AGB stars (in units of solar mass) taken from Karakas et al. (2010). "
        description += "These yields were calculated for the initial mass range 1-6 Msun. The range of yields in the "
        description += "mass range 1-8 Msun correspond to interpolation and extrapolation of the original yields."
        Header.attrs["Description"] = np.string_(description)

        contact = "Dataset generated by Camila Correa (University of Amsterdam). Email: camila.correa@uva.nl,"
        contact += " website: camilacorrea.com"
        Header.attrs["Contact"] = np.string_(contact)

        mass_data = data_file.create_dataset('Masses', data=Karakas_yields.mass_bins)
        mass_data.attrs["Description"] = np.string_("Mass bins in units of Msolar")

        Z_data = data_file.create_dataset('Metallicities', data=Karakas_yields.Z_bins)
        Z_data.attrs["Description"] = np.string_("Metallicity bins")

        data_file.create_dataset('Number_of_metallicities', data=Karakas_yields.num_Z_bins)
        data_file.create_dataset('Number_of_masses', data=Karakas_yields.num_mass_bins)
        data_file.create_dataset('Number_of_species', data=np.array([13]))

        Z_names = ['Z_0.0001', 'Z_0.004']
        var = np.array(Z_names, dtype='S')
        dt = h5py.special_dtype(vlen=str)
        data_file.create_dataset('Yield_names', dtype=dt, data=var)

        Element_names = np.string_(['Hydrogen', 'Helium', 'Carbon', 'Nitrogen', 'Oxygen', 'Neon', 'Magnesium', 'Silicon', 'Sulphur',
                   'Calcium', 'Iron', 'Strontium', 'Barium'])
        dt = h5py.string_dtype(encoding='ascii')
        data_file.create_dataset('Species_names', dtype=dt, data=Element_names)

        Reference = np.string_(['Karakas, A., et al., 2010, MNRAS, 477, 1, 421'])
        data_file.create_dataset('Reference', data=Reference)

        Data = data_file.create_group('Yields')

        for i, Zi, in enumerate(Karakas_yields.Z_bins):

            yields, mass_ejected = Karakas_yields.read_data(i)
            yields = Karakas_yields.complete_for_s_process(yields, i)
            total_metals = np.sum(yields[2:, :], axis=0)

            group_data = Data.create_group(Z_names[i])
            group_data.create_dataset('Yield', data=yields)
            group_data.create_dataset('Ejected_mass', data=mass_ejected)
            group_data.create_dataset('Total_Metals', data=total_metals)

